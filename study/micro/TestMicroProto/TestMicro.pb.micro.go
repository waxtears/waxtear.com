// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: TestMicroProto/TestMicro.proto

package TestMicroProto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for TestService service

func NewTestServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for TestService service

type TestService interface {
	SayHello(ctx context.Context, in *SayHelloReq, opts ...client.CallOption) (*SayHelloRsp, error)
}

type testService struct {
	c    client.Client
	name string
}

func NewTestService(name string, c client.Client) TestService {
	return &testService{
		c:    c,
		name: name,
	}
}

func (c *testService) SayHello(ctx context.Context, in *SayHelloReq, opts ...client.CallOption) (*SayHelloRsp, error) {
	req := c.c.NewRequest(c.name, "TestService.SayHello", in)
	out := new(SayHelloRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TestService service

type TestServiceHandler interface {
	SayHello(context.Context, *SayHelloReq, *SayHelloRsp) error
}

func RegisterTestServiceHandler(s server.Server, hdlr TestServiceHandler, opts ...server.HandlerOption) error {
	type testService interface {
		SayHello(ctx context.Context, in *SayHelloReq, out *SayHelloRsp) error
	}
	type TestService struct {
		testService
	}
	h := &testServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&TestService{h}, opts...))
}

type testServiceHandler struct {
	TestServiceHandler
}

func (h *testServiceHandler) SayHello(ctx context.Context, in *SayHelloReq, out *SayHelloRsp) error {
	return h.TestServiceHandler.SayHello(ctx, in, out)
}
